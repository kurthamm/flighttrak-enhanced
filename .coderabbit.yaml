reviews:
  profile: chill
  path_instructions:
    - path: "**/*.py"
      instructions: |
        # FlightTrak - Real-time Aircraft Monitoring System

        ## Project Context
        FlightTrak monitors 69 specific aircraft (celebrities, government, historic planes) using ADS-B data.
        Key features:
        - Smart closest-approach alerting (ONE alert per flyby)
        - Intelligent emergency squawk detection (7500/7600/7700/7777)
        - Enhanced HTML email alerts with FlightAware integration
        - Real-time web dashboard
        - Twitter/X posting with privacy delays

        ## Current Architecture (7 Core Files)
        - flight_monitor.py (33K) - Main tracking service, polls every 15 seconds
        - enhanced_dashboard.py (12K) - Flask web dashboard on port 5030
        - config_manager.py (11K) - Configuration with environment variable overrides
        - email_service.py (54K) - Gmail SMTP alerts + FlightAware API integration
        - anomaly_detector.py (27K) - Emergency detection with false-positive filtering
        - twitter_poster.py (13K) - Social media posting
        - utils.py (11K) - Shared utilities (haversine distance, formatting)

        ## Code Review Focus Areas

        ### 1. EXCEPTION HANDLING
        - NEVER use bare `except:` statements (catches KeyboardInterrupt/SystemExit)
        - Use specific exception types: (ValueError, AttributeError, KeyError), etc.
        - Emergency detection (7500/7700/7777) must NEVER be silently caught
        - API timeouts should be handled explicitly (requests.exceptions.Timeout)

        ### 2. SECURITY & SAFETY
        - No hardcoded API keys, passwords, or secrets in code
        - No `debug=True` in Flask production code
        - Emergency squawk codes (7500/7700/7777) must always trigger alerts
        - Validate all external data (ADS-B JSON, FlightAware API responses)
        - SQL injection prevention (we don't use SQL, but flag if introduced)

        ### 3. AVIATION DOMAIN LOGIC
        - Emergency codes: 7500 (hijack), 7600 (radio failure), 7700 (emergency), 7777 (military intercept)
        - 7600 filtering: Only filter during landing approach (altitude, descent rate, airport proximity)
        - Distance calculations: Use haversine formula for lat/lon â†’ miles
        - ICAO hex codes: Must be uppercase (A6F2B7 not a6f2b7)
        - Altitude in feet, speed in knots, distance in miles (aviation standard)

        ### 4. PERFORMANCE & EFFICIENCY
        - Polling interval: 15 seconds for planes.hamm.me (don't reduce, avoid spam)
        - Alert cooldowns: 24-hour minimum between alerts for same aircraft
        - Email rate limiting: Don't send duplicate alerts within short timeframes
        - API timeouts: FlightAware requests should timeout after 10 seconds
        - Avoid N+1 queries if database operations are added

        ### 5. CODE QUALITY
        - Type hints preferred for function signatures
        - Logging: Use appropriate levels (debug/info/warning/error)
        - No code duplication: Extract to utils.py if used in 2+ places
        - Function length: Flag functions >100 lines for potential refactoring
        - Clear variable names: No single-letter variables except loop counters

        ### 6. DATA VALIDATION
        - Validate aircraft_list.json structure on load
        - Check for required fields in ADS-B data (hex, lat, lon, altitude)
        - Validate email recipients are non-empty before sending
        - FlightAware API responses should check status codes

        ### 7. TESTING & RELIABILITY
        - Flag missing error handling in critical paths
        - Ensure services can recover from API failures gracefully
        - Configuration should have sensible defaults
        - Flag any operations that could cause infinite loops

        ### 8. MAINTAINABILITY
        - Keep current 7-file structure (don't suggest consolidation unless critical)
        - Comments for complex domain logic (emergency filtering, distance tracking)
        - Document any "magic numbers" (why 10,000 ft? why 15 miles?)
        - Clear separation: scripts/ vs tests/ vs core modules

        ## What NOT to Flag
        - Single-use imports (anomaly_detector only used by flight_monitor - intentional)
        - File size (email_service.py is 54K - acceptable, includes FlightAware API)
        - Global instances (_flightaware_lookup singleton pattern - intentional)
        - 15-second polling interval (designed for this data source)

        ## Priority Levels
        HIGH: Security issues, emergency detection bugs, exception handling flaws
        MEDIUM: Performance issues, code duplication, missing validation
        LOW: Style improvements, minor refactoring suggestions
